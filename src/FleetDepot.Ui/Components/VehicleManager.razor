@using FleetDepot.Ui.Components
@using FleetDepot.Ui.Models
@inject HttpClient Http

<h1>@Title</h1>

<button class="btn btn-success mb-3" @onclick="CreateNewVehicle">Add</button>

@if (!string.IsNullOrEmpty(errorMessage))
{
    <div class="alert alert-danger alert-dismissible fade show" role="alert">
        @errorMessage
        <button type="button" class="btn-close" @onclick="() => errorMessage = null" aria-label="Close"></button>
    </div>
}
@if (vehicles is null)
{
    <p><em>Loading...</em></p>
}
else
{
    <VehicleTable Vehicles="vehicles" OnEdit="EditVehicle" OnDelete="DeleteVehicle" />
}

@if (showForm)
{
    <VehicleForm Vehicle="editVehicle" OnSave="SaveVehicle" OnClose="@(() => showForm = false)" IsOpen="showForm" isEdit="isEdit"/>
}

@code {
    [Parameter] public string Endpoint { get; set; } = "";
    [Parameter] public string Title { get; set; } = "Vehicle";

    private List<Vehicle> vehicles = [];
    private Vehicle editVehicle = new();
    private bool showForm = false;
    private bool isEdit = false;
    private string? errorMessage;

    protected override async Task OnInitializedAsync()
    {
        await LoadVehicles();
    }

    private async Task LoadVehicles()
    {
        vehicles = await Http.GetFromJsonAsync<List<Vehicle>>($"api/vehicles/{Endpoint}") ?? [];
    }

    private void CreateNewVehicle()
    {
        editVehicle = new Vehicle();
        showForm = true;
    }

    private void EditVehicle(Vehicle vehicle)
    {
        editVehicle = new Vehicle
            {
                Series = vehicle.Series,
                Number = vehicle.Number,
                Color = vehicle.Color,
                NumberOfPassengers = vehicle.NumberOfPassengers,
                Type = vehicle.Type
            };
        isEdit = true;
        showForm = true;
    }

    private async Task SaveVehicle(Vehicle vehicle)
    {
        var response = isEdit
            ? await Http.PutAsJsonAsync($"api/vehicles/{Endpoint}/{vehicle.Series}/{vehicle.Number}", vehicle)
            : await Http.PostAsJsonAsync($"api/vehicles/{Endpoint}", vehicle);

        if (response.IsSuccessStatusCode)
        {
            await LoadVehicles();
            showForm = false;
            errorMessage = null;
        }
        else
        {
            try
            {
                var error = await response.Content.ReadFromJsonAsync<ErrorResponse>();
                errorMessage = error?.Message;
            }
            catch (Exception)
            {
                errorMessage = "An unexpected error occurred. Please, try again later.";
            }
        }

        isEdit = false;
    }

    private async Task DeleteVehicle(Vehicle vehicle)
    {
        var url = $"api/vehicles/{Endpoint}/{vehicle.Series}/{vehicle.Number}";
        var response = await Http.DeleteAsync(url);
        if (response.IsSuccessStatusCode)
        {
            vehicles.Remove(vehicle);
        }
    }
}
